//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:4.0.30319.237
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace SlvHanbaiClient.svcPgLock {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="svcPgLock.svcPgLock")]
    public interface svcPgLock {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:svcPgLock/LockPg", ReplyAction="urn:svcPgLock/LockPgResponse")]
        System.IAsyncResult BeginLockPg(string random, string pgId, string lockId, int type, System.AsyncCallback callback, object asyncState);
        
        void EndLockPg(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface svcPgLockChannel : SlvHanbaiClient.svcPgLock.svcPgLock, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class svcPgLockClient : System.ServiceModel.ClientBase<SlvHanbaiClient.svcPgLock.svcPgLock>, SlvHanbaiClient.svcPgLock.svcPgLock {
        
        private BeginOperationDelegate onBeginLockPgDelegate;
        
        private EndOperationDelegate onEndLockPgDelegate;
        
        private System.Threading.SendOrPostCallback onLockPgCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public svcPgLockClient() {
        }
        
        public svcPgLockClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public svcPgLockClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public svcPgLockClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public svcPgLockClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("CookieContainer を設定できません。バインドに HttpCookieContainerBindingElement が含まれていることを確認してくだ" +
                            "さい。");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> LockPgCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SlvHanbaiClient.svcPgLock.svcPgLock.BeginLockPg(string random, string pgId, string lockId, int type, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLockPg(random, pgId, lockId, type, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void SlvHanbaiClient.svcPgLock.svcPgLock.EndLockPg(System.IAsyncResult result) {
            base.Channel.EndLockPg(result);
        }
        
        private System.IAsyncResult OnBeginLockPg(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string random = ((string)(inValues[0]));
            string pgId = ((string)(inValues[1]));
            string lockId = ((string)(inValues[2]));
            int type = ((int)(inValues[3]));
            return ((SlvHanbaiClient.svcPgLock.svcPgLock)(this)).BeginLockPg(random, pgId, lockId, type, callback, asyncState);
        }
        
        private object[] OnEndLockPg(System.IAsyncResult result) {
            ((SlvHanbaiClient.svcPgLock.svcPgLock)(this)).EndLockPg(result);
            return null;
        }
        
        private void OnLockPgCompleted(object state) {
            if ((this.LockPgCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LockPgCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LockPgAsync(string random, string pgId, string lockId, int type) {
            this.LockPgAsync(random, pgId, lockId, type, null);
        }
        
        public void LockPgAsync(string random, string pgId, string lockId, int type, object userState) {
            if ((this.onBeginLockPgDelegate == null)) {
                this.onBeginLockPgDelegate = new BeginOperationDelegate(this.OnBeginLockPg);
            }
            if ((this.onEndLockPgDelegate == null)) {
                this.onEndLockPgDelegate = new EndOperationDelegate(this.OnEndLockPg);
            }
            if ((this.onLockPgCompletedDelegate == null)) {
                this.onLockPgCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLockPgCompleted);
            }
            base.InvokeAsync(this.onBeginLockPgDelegate, new object[] {
                        random,
                        pgId,
                        lockId,
                        type}, this.onEndLockPgDelegate, this.onLockPgCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override SlvHanbaiClient.svcPgLock.svcPgLock CreateChannel() {
            return new svcPgLockClientChannel(this);
        }
        
        private class svcPgLockClientChannel : ChannelBase<SlvHanbaiClient.svcPgLock.svcPgLock>, SlvHanbaiClient.svcPgLock.svcPgLock {
            
            public svcPgLockClientChannel(System.ServiceModel.ClientBase<SlvHanbaiClient.svcPgLock.svcPgLock> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginLockPg(string random, string pgId, string lockId, int type, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = random;
                _args[1] = pgId;
                _args[2] = lockId;
                _args[3] = type;
                System.IAsyncResult _result = base.BeginInvoke("LockPg", _args, callback, asyncState);
                return _result;
            }
            
            public void EndLockPg(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("LockPg", _args, result);
            }
        }
    }
}
