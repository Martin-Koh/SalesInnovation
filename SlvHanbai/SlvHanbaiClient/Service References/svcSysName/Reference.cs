//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:4.0.30319.237
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace SlvHanbaiClient.svcSysName {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EntityName", Namespace="http://schemas.datacontract.org/2004/07/SlvHanbai.Web.Class.Entity")]
    public partial class EntityName : SlvHanbaiClient.svcSysName.EntityBase {
        
        private string descriptionField;
        
        private int division_idField;
        
        private int idField;
        
        private string messageField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.descriptionField, value) != true)) {
                    this.descriptionField = value;
                    this.RaisePropertyChanged("description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int division_id {
            get {
                return this.division_idField;
            }
            set {
                if ((this.division_idField.Equals(value) != true)) {
                    this.division_idField = value;
                    this.RaisePropertyChanged("division_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string message {
            get {
                return this.messageField;
            }
            set {
                if ((object.ReferenceEquals(this.messageField, value) != true)) {
                    this.messageField = value;
                    this.RaisePropertyChanged("message");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EntityBase", Namespace="http://schemas.datacontract.org/2004/07/SlvHanbai.Web.Class.Entity")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SlvHanbaiClient.svcSysName.EntityName))]
    public partial class EntityBase : object, System.ComponentModel.INotifyPropertyChanged {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="svcSysName.svcSysName")]
    public interface svcSysName {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:svcSysName/GetNameList", ReplyAction="urn:svcSysName/GetNameListResponse")]
        System.IAsyncResult BeginGetNameList(string random, int divisionIDFrom, int divisionIDTo, int idFrom, int idTo, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<SlvHanbaiClient.svcSysName.EntityName> EndGetNameList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:svcSysName/GetNameListAll", ReplyAction="urn:svcSysName/GetNameListAllResponse")]
        System.IAsyncResult BeginGetNameListAll(string random, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<SlvHanbaiClient.svcSysName.EntityName> EndGetNameListAll(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface svcSysNameChannel : SlvHanbaiClient.svcSysName.svcSysName, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetNameListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetNameListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<SlvHanbaiClient.svcSysName.EntityName> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<SlvHanbaiClient.svcSysName.EntityName>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetNameListAllCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetNameListAllCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<SlvHanbaiClient.svcSysName.EntityName> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<SlvHanbaiClient.svcSysName.EntityName>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class svcSysNameClient : System.ServiceModel.ClientBase<SlvHanbaiClient.svcSysName.svcSysName>, SlvHanbaiClient.svcSysName.svcSysName {
        
        private BeginOperationDelegate onBeginGetNameListDelegate;
        
        private EndOperationDelegate onEndGetNameListDelegate;
        
        private System.Threading.SendOrPostCallback onGetNameListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetNameListAllDelegate;
        
        private EndOperationDelegate onEndGetNameListAllDelegate;
        
        private System.Threading.SendOrPostCallback onGetNameListAllCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public svcSysNameClient() {
        }
        
        public svcSysNameClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public svcSysNameClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public svcSysNameClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public svcSysNameClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("CookieContainer を設定できません。バインドに HttpCookieContainerBindingElement が含まれていることを確認してくだ" +
                            "さい。");
                }
            }
        }
        
        public event System.EventHandler<GetNameListCompletedEventArgs> GetNameListCompleted;
        
        public event System.EventHandler<GetNameListAllCompletedEventArgs> GetNameListAllCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SlvHanbaiClient.svcSysName.svcSysName.BeginGetNameList(string random, int divisionIDFrom, int divisionIDTo, int idFrom, int idTo, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetNameList(random, divisionIDFrom, divisionIDTo, idFrom, idTo, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<SlvHanbaiClient.svcSysName.EntityName> SlvHanbaiClient.svcSysName.svcSysName.EndGetNameList(System.IAsyncResult result) {
            return base.Channel.EndGetNameList(result);
        }
        
        private System.IAsyncResult OnBeginGetNameList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string random = ((string)(inValues[0]));
            int divisionIDFrom = ((int)(inValues[1]));
            int divisionIDTo = ((int)(inValues[2]));
            int idFrom = ((int)(inValues[3]));
            int idTo = ((int)(inValues[4]));
            return ((SlvHanbaiClient.svcSysName.svcSysName)(this)).BeginGetNameList(random, divisionIDFrom, divisionIDTo, idFrom, idTo, callback, asyncState);
        }
        
        private object[] OnEndGetNameList(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<SlvHanbaiClient.svcSysName.EntityName> retVal = ((SlvHanbaiClient.svcSysName.svcSysName)(this)).EndGetNameList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetNameListCompleted(object state) {
            if ((this.GetNameListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetNameListCompleted(this, new GetNameListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetNameListAsync(string random, int divisionIDFrom, int divisionIDTo, int idFrom, int idTo) {
            this.GetNameListAsync(random, divisionIDFrom, divisionIDTo, idFrom, idTo, null);
        }
        
        public void GetNameListAsync(string random, int divisionIDFrom, int divisionIDTo, int idFrom, int idTo, object userState) {
            if ((this.onBeginGetNameListDelegate == null)) {
                this.onBeginGetNameListDelegate = new BeginOperationDelegate(this.OnBeginGetNameList);
            }
            if ((this.onEndGetNameListDelegate == null)) {
                this.onEndGetNameListDelegate = new EndOperationDelegate(this.OnEndGetNameList);
            }
            if ((this.onGetNameListCompletedDelegate == null)) {
                this.onGetNameListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetNameListCompleted);
            }
            base.InvokeAsync(this.onBeginGetNameListDelegate, new object[] {
                        random,
                        divisionIDFrom,
                        divisionIDTo,
                        idFrom,
                        idTo}, this.onEndGetNameListDelegate, this.onGetNameListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SlvHanbaiClient.svcSysName.svcSysName.BeginGetNameListAll(string random, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetNameListAll(random, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<SlvHanbaiClient.svcSysName.EntityName> SlvHanbaiClient.svcSysName.svcSysName.EndGetNameListAll(System.IAsyncResult result) {
            return base.Channel.EndGetNameListAll(result);
        }
        
        private System.IAsyncResult OnBeginGetNameListAll(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string random = ((string)(inValues[0]));
            return ((SlvHanbaiClient.svcSysName.svcSysName)(this)).BeginGetNameListAll(random, callback, asyncState);
        }
        
        private object[] OnEndGetNameListAll(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<SlvHanbaiClient.svcSysName.EntityName> retVal = ((SlvHanbaiClient.svcSysName.svcSysName)(this)).EndGetNameListAll(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetNameListAllCompleted(object state) {
            if ((this.GetNameListAllCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetNameListAllCompleted(this, new GetNameListAllCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetNameListAllAsync(string random) {
            this.GetNameListAllAsync(random, null);
        }
        
        public void GetNameListAllAsync(string random, object userState) {
            if ((this.onBeginGetNameListAllDelegate == null)) {
                this.onBeginGetNameListAllDelegate = new BeginOperationDelegate(this.OnBeginGetNameListAll);
            }
            if ((this.onEndGetNameListAllDelegate == null)) {
                this.onEndGetNameListAllDelegate = new EndOperationDelegate(this.OnEndGetNameListAll);
            }
            if ((this.onGetNameListAllCompletedDelegate == null)) {
                this.onGetNameListAllCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetNameListAllCompleted);
            }
            base.InvokeAsync(this.onBeginGetNameListAllDelegate, new object[] {
                        random}, this.onEndGetNameListAllDelegate, this.onGetNameListAllCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override SlvHanbaiClient.svcSysName.svcSysName CreateChannel() {
            return new svcSysNameClientChannel(this);
        }
        
        private class svcSysNameClientChannel : ChannelBase<SlvHanbaiClient.svcSysName.svcSysName>, SlvHanbaiClient.svcSysName.svcSysName {
            
            public svcSysNameClientChannel(System.ServiceModel.ClientBase<SlvHanbaiClient.svcSysName.svcSysName> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetNameList(string random, int divisionIDFrom, int divisionIDTo, int idFrom, int idTo, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = random;
                _args[1] = divisionIDFrom;
                _args[2] = divisionIDTo;
                _args[3] = idFrom;
                _args[4] = idTo;
                System.IAsyncResult _result = base.BeginInvoke("GetNameList", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<SlvHanbaiClient.svcSysName.EntityName> EndGetNameList(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<SlvHanbaiClient.svcSysName.EntityName> _result = ((System.Collections.ObjectModel.ObservableCollection<SlvHanbaiClient.svcSysName.EntityName>)(base.EndInvoke("GetNameList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetNameListAll(string random, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = random;
                System.IAsyncResult _result = base.BeginInvoke("GetNameListAll", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<SlvHanbaiClient.svcSysName.EntityName> EndGetNameListAll(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<SlvHanbaiClient.svcSysName.EntityName> _result = ((System.Collections.ObjectModel.ObservableCollection<SlvHanbaiClient.svcSysName.EntityName>)(base.EndInvoke("GetNameListAll", _args, result)));
                return _result;
            }
        }
    }
}
