//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:4.0.30319.237
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace SlvHanbaiClient.svcStockInventory {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EntityStockInventory", Namespace="http://schemas.datacontract.org/2004/07/SlvHanbai.Web.Class.Entity")]
    public partial class EntityStockInventory : SlvHanbaiClient.svcStockInventory.EntityBase {
        
        private double _account_inventory_numberField;
        
        private string _commodity_idField;
        
        private string _commodity_nameField;
        
        private double _diff_numberField;
        
        private bool _exec_flgField;
        
        private int _lock_flgField;
        
        private string _memoField;
        
        private int _payment_exists_flgField;
        
        private double _practice_inventory_numberField;
        
        private string messageField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double _account_inventory_number {
            get {
                return this._account_inventory_numberField;
            }
            set {
                if ((this._account_inventory_numberField.Equals(value) != true)) {
                    this._account_inventory_numberField = value;
                    this.RaisePropertyChanged("_account_inventory_number");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string _commodity_id {
            get {
                return this._commodity_idField;
            }
            set {
                if ((object.ReferenceEquals(this._commodity_idField, value) != true)) {
                    this._commodity_idField = value;
                    this.RaisePropertyChanged("_commodity_id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string _commodity_name {
            get {
                return this._commodity_nameField;
            }
            set {
                if ((object.ReferenceEquals(this._commodity_nameField, value) != true)) {
                    this._commodity_nameField = value;
                    this.RaisePropertyChanged("_commodity_name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double _diff_number {
            get {
                return this._diff_numberField;
            }
            set {
                if ((this._diff_numberField.Equals(value) != true)) {
                    this._diff_numberField = value;
                    this.RaisePropertyChanged("_diff_number");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool _exec_flg {
            get {
                return this._exec_flgField;
            }
            set {
                if ((this._exec_flgField.Equals(value) != true)) {
                    this._exec_flgField = value;
                    this.RaisePropertyChanged("_exec_flg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int _lock_flg {
            get {
                return this._lock_flgField;
            }
            set {
                if ((this._lock_flgField.Equals(value) != true)) {
                    this._lock_flgField = value;
                    this.RaisePropertyChanged("_lock_flg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string _memo {
            get {
                return this._memoField;
            }
            set {
                if ((object.ReferenceEquals(this._memoField, value) != true)) {
                    this._memoField = value;
                    this.RaisePropertyChanged("_memo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int _payment_exists_flg {
            get {
                return this._payment_exists_flgField;
            }
            set {
                if ((this._payment_exists_flgField.Equals(value) != true)) {
                    this._payment_exists_flgField = value;
                    this.RaisePropertyChanged("_payment_exists_flg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double _practice_inventory_number {
            get {
                return this._practice_inventory_numberField;
            }
            set {
                if ((this._practice_inventory_numberField.Equals(value) != true)) {
                    this._practice_inventory_numberField = value;
                    this.RaisePropertyChanged("_practice_inventory_number");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string message {
            get {
                return this.messageField;
            }
            set {
                if ((object.ReferenceEquals(this.messageField, value) != true)) {
                    this.messageField = value;
                    this.RaisePropertyChanged("message");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EntityBase", Namespace="http://schemas.datacontract.org/2004/07/SlvHanbai.Web.Class.Entity")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SlvHanbaiClient.svcStockInventory.EntityStockInventory))]
    public partial class EntityBase : object, System.ComponentModel.INotifyPropertyChanged {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="svcStockInventory.svcStockInventory")]
    public interface svcStockInventory {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:svcStockInventory/GetStockInventoryList", ReplyAction="urn:svcStockInventory/GetStockInventoryListResponse")]
        System.IAsyncResult BeginGetStockInventoryList(string random, string strWhereSql, string strOrderBySql, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<SlvHanbaiClient.svcStockInventory.EntityStockInventory> EndGetStockInventoryList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:svcStockInventory/UpdateStockInventory", ReplyAction="urn:svcStockInventory/UpdateStockInventoryResponse")]
        System.IAsyncResult BeginUpdateStockInventory(string random, int type, string ymd, System.Collections.ObjectModel.ObservableCollection<SlvHanbaiClient.svcStockInventory.EntityStockInventory> entity, System.AsyncCallback callback, object asyncState);
        
        string EndUpdateStockInventory(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface svcStockInventoryChannel : SlvHanbaiClient.svcStockInventory.svcStockInventory, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetStockInventoryListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetStockInventoryListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<SlvHanbaiClient.svcStockInventory.EntityStockInventory> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<SlvHanbaiClient.svcStockInventory.EntityStockInventory>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateStockInventoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateStockInventoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class svcStockInventoryClient : System.ServiceModel.ClientBase<SlvHanbaiClient.svcStockInventory.svcStockInventory>, SlvHanbaiClient.svcStockInventory.svcStockInventory {
        
        private BeginOperationDelegate onBeginGetStockInventoryListDelegate;
        
        private EndOperationDelegate onEndGetStockInventoryListDelegate;
        
        private System.Threading.SendOrPostCallback onGetStockInventoryListCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateStockInventoryDelegate;
        
        private EndOperationDelegate onEndUpdateStockInventoryDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateStockInventoryCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public svcStockInventoryClient() {
        }
        
        public svcStockInventoryClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public svcStockInventoryClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public svcStockInventoryClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public svcStockInventoryClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("CookieContainer を設定できません。バインドに HttpCookieContainerBindingElement が含まれていることを確認してくだ" +
                            "さい。");
                }
            }
        }
        
        public event System.EventHandler<GetStockInventoryListCompletedEventArgs> GetStockInventoryListCompleted;
        
        public event System.EventHandler<UpdateStockInventoryCompletedEventArgs> UpdateStockInventoryCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SlvHanbaiClient.svcStockInventory.svcStockInventory.BeginGetStockInventoryList(string random, string strWhereSql, string strOrderBySql, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetStockInventoryList(random, strWhereSql, strOrderBySql, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<SlvHanbaiClient.svcStockInventory.EntityStockInventory> SlvHanbaiClient.svcStockInventory.svcStockInventory.EndGetStockInventoryList(System.IAsyncResult result) {
            return base.Channel.EndGetStockInventoryList(result);
        }
        
        private System.IAsyncResult OnBeginGetStockInventoryList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string random = ((string)(inValues[0]));
            string strWhereSql = ((string)(inValues[1]));
            string strOrderBySql = ((string)(inValues[2]));
            return ((SlvHanbaiClient.svcStockInventory.svcStockInventory)(this)).BeginGetStockInventoryList(random, strWhereSql, strOrderBySql, callback, asyncState);
        }
        
        private object[] OnEndGetStockInventoryList(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<SlvHanbaiClient.svcStockInventory.EntityStockInventory> retVal = ((SlvHanbaiClient.svcStockInventory.svcStockInventory)(this)).EndGetStockInventoryList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetStockInventoryListCompleted(object state) {
            if ((this.GetStockInventoryListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetStockInventoryListCompleted(this, new GetStockInventoryListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetStockInventoryListAsync(string random, string strWhereSql, string strOrderBySql) {
            this.GetStockInventoryListAsync(random, strWhereSql, strOrderBySql, null);
        }
        
        public void GetStockInventoryListAsync(string random, string strWhereSql, string strOrderBySql, object userState) {
            if ((this.onBeginGetStockInventoryListDelegate == null)) {
                this.onBeginGetStockInventoryListDelegate = new BeginOperationDelegate(this.OnBeginGetStockInventoryList);
            }
            if ((this.onEndGetStockInventoryListDelegate == null)) {
                this.onEndGetStockInventoryListDelegate = new EndOperationDelegate(this.OnEndGetStockInventoryList);
            }
            if ((this.onGetStockInventoryListCompletedDelegate == null)) {
                this.onGetStockInventoryListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetStockInventoryListCompleted);
            }
            base.InvokeAsync(this.onBeginGetStockInventoryListDelegate, new object[] {
                        random,
                        strWhereSql,
                        strOrderBySql}, this.onEndGetStockInventoryListDelegate, this.onGetStockInventoryListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SlvHanbaiClient.svcStockInventory.svcStockInventory.BeginUpdateStockInventory(string random, int type, string ymd, System.Collections.ObjectModel.ObservableCollection<SlvHanbaiClient.svcStockInventory.EntityStockInventory> entity, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateStockInventory(random, type, ymd, entity, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string SlvHanbaiClient.svcStockInventory.svcStockInventory.EndUpdateStockInventory(System.IAsyncResult result) {
            return base.Channel.EndUpdateStockInventory(result);
        }
        
        private System.IAsyncResult OnBeginUpdateStockInventory(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string random = ((string)(inValues[0]));
            int type = ((int)(inValues[1]));
            string ymd = ((string)(inValues[2]));
            System.Collections.ObjectModel.ObservableCollection<SlvHanbaiClient.svcStockInventory.EntityStockInventory> entity = ((System.Collections.ObjectModel.ObservableCollection<SlvHanbaiClient.svcStockInventory.EntityStockInventory>)(inValues[3]));
            return ((SlvHanbaiClient.svcStockInventory.svcStockInventory)(this)).BeginUpdateStockInventory(random, type, ymd, entity, callback, asyncState);
        }
        
        private object[] OnEndUpdateStockInventory(System.IAsyncResult result) {
            string retVal = ((SlvHanbaiClient.svcStockInventory.svcStockInventory)(this)).EndUpdateStockInventory(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateStockInventoryCompleted(object state) {
            if ((this.UpdateStockInventoryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateStockInventoryCompleted(this, new UpdateStockInventoryCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateStockInventoryAsync(string random, int type, string ymd, System.Collections.ObjectModel.ObservableCollection<SlvHanbaiClient.svcStockInventory.EntityStockInventory> entity) {
            this.UpdateStockInventoryAsync(random, type, ymd, entity, null);
        }
        
        public void UpdateStockInventoryAsync(string random, int type, string ymd, System.Collections.ObjectModel.ObservableCollection<SlvHanbaiClient.svcStockInventory.EntityStockInventory> entity, object userState) {
            if ((this.onBeginUpdateStockInventoryDelegate == null)) {
                this.onBeginUpdateStockInventoryDelegate = new BeginOperationDelegate(this.OnBeginUpdateStockInventory);
            }
            if ((this.onEndUpdateStockInventoryDelegate == null)) {
                this.onEndUpdateStockInventoryDelegate = new EndOperationDelegate(this.OnEndUpdateStockInventory);
            }
            if ((this.onUpdateStockInventoryCompletedDelegate == null)) {
                this.onUpdateStockInventoryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateStockInventoryCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateStockInventoryDelegate, new object[] {
                        random,
                        type,
                        ymd,
                        entity}, this.onEndUpdateStockInventoryDelegate, this.onUpdateStockInventoryCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override SlvHanbaiClient.svcStockInventory.svcStockInventory CreateChannel() {
            return new svcStockInventoryClientChannel(this);
        }
        
        private class svcStockInventoryClientChannel : ChannelBase<SlvHanbaiClient.svcStockInventory.svcStockInventory>, SlvHanbaiClient.svcStockInventory.svcStockInventory {
            
            public svcStockInventoryClientChannel(System.ServiceModel.ClientBase<SlvHanbaiClient.svcStockInventory.svcStockInventory> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetStockInventoryList(string random, string strWhereSql, string strOrderBySql, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = random;
                _args[1] = strWhereSql;
                _args[2] = strOrderBySql;
                System.IAsyncResult _result = base.BeginInvoke("GetStockInventoryList", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<SlvHanbaiClient.svcStockInventory.EntityStockInventory> EndGetStockInventoryList(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<SlvHanbaiClient.svcStockInventory.EntityStockInventory> _result = ((System.Collections.ObjectModel.ObservableCollection<SlvHanbaiClient.svcStockInventory.EntityStockInventory>)(base.EndInvoke("GetStockInventoryList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateStockInventory(string random, int type, string ymd, System.Collections.ObjectModel.ObservableCollection<SlvHanbaiClient.svcStockInventory.EntityStockInventory> entity, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = random;
                _args[1] = type;
                _args[2] = ymd;
                _args[3] = entity;
                System.IAsyncResult _result = base.BeginInvoke("UpdateStockInventory", _args, callback, asyncState);
                return _result;
            }
            
            public string EndUpdateStockInventory(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("UpdateStockInventory", _args, result)));
                return _result;
            }
        }
    }
}
