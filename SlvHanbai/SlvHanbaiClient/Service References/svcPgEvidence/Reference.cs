//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:4.0.30319.237
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace SlvHanbaiClient.svcPgEvidence {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="svcPgEvidence.svcPgEvidence")]
    public interface svcPgEvidence {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:svcPgEvidence/AddEvidence", ReplyAction="urn:svcPgEvidence/AddEvidenceResponse")]
        System.IAsyncResult BeginAddEvidence(string random, string pgId, int type, string memo, System.AsyncCallback callback, object asyncState);
        
        void EndAddEvidence(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface svcPgEvidenceChannel : SlvHanbaiClient.svcPgEvidence.svcPgEvidence, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class svcPgEvidenceClient : System.ServiceModel.ClientBase<SlvHanbaiClient.svcPgEvidence.svcPgEvidence>, SlvHanbaiClient.svcPgEvidence.svcPgEvidence {
        
        private BeginOperationDelegate onBeginAddEvidenceDelegate;
        
        private EndOperationDelegate onEndAddEvidenceDelegate;
        
        private System.Threading.SendOrPostCallback onAddEvidenceCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public svcPgEvidenceClient() {
        }
        
        public svcPgEvidenceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public svcPgEvidenceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public svcPgEvidenceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public svcPgEvidenceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("CookieContainer を設定できません。バインドに HttpCookieContainerBindingElement が含まれていることを確認してくだ" +
                            "さい。");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddEvidenceCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SlvHanbaiClient.svcPgEvidence.svcPgEvidence.BeginAddEvidence(string random, string pgId, int type, string memo, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddEvidence(random, pgId, type, memo, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void SlvHanbaiClient.svcPgEvidence.svcPgEvidence.EndAddEvidence(System.IAsyncResult result) {
            base.Channel.EndAddEvidence(result);
        }
        
        private System.IAsyncResult OnBeginAddEvidence(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string random = ((string)(inValues[0]));
            string pgId = ((string)(inValues[1]));
            int type = ((int)(inValues[2]));
            string memo = ((string)(inValues[3]));
            return ((SlvHanbaiClient.svcPgEvidence.svcPgEvidence)(this)).BeginAddEvidence(random, pgId, type, memo, callback, asyncState);
        }
        
        private object[] OnEndAddEvidence(System.IAsyncResult result) {
            ((SlvHanbaiClient.svcPgEvidence.svcPgEvidence)(this)).EndAddEvidence(result);
            return null;
        }
        
        private void OnAddEvidenceCompleted(object state) {
            if ((this.AddEvidenceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddEvidenceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddEvidenceAsync(string random, string pgId, int type, string memo) {
            this.AddEvidenceAsync(random, pgId, type, memo, null);
        }
        
        public void AddEvidenceAsync(string random, string pgId, int type, string memo, object userState) {
            if ((this.onBeginAddEvidenceDelegate == null)) {
                this.onBeginAddEvidenceDelegate = new BeginOperationDelegate(this.OnBeginAddEvidence);
            }
            if ((this.onEndAddEvidenceDelegate == null)) {
                this.onEndAddEvidenceDelegate = new EndOperationDelegate(this.OnEndAddEvidence);
            }
            if ((this.onAddEvidenceCompletedDelegate == null)) {
                this.onAddEvidenceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddEvidenceCompleted);
            }
            base.InvokeAsync(this.onBeginAddEvidenceDelegate, new object[] {
                        random,
                        pgId,
                        type,
                        memo}, this.onEndAddEvidenceDelegate, this.onAddEvidenceCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override SlvHanbaiClient.svcPgEvidence.svcPgEvidence CreateChannel() {
            return new svcPgEvidenceClientChannel(this);
        }
        
        private class svcPgEvidenceClientChannel : ChannelBase<SlvHanbaiClient.svcPgEvidence.svcPgEvidence>, SlvHanbaiClient.svcPgEvidence.svcPgEvidence {
            
            public svcPgEvidenceClientChannel(System.ServiceModel.ClientBase<SlvHanbaiClient.svcPgEvidence.svcPgEvidence> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginAddEvidence(string random, string pgId, int type, string memo, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = random;
                _args[1] = pgId;
                _args[2] = type;
                _args[3] = memo;
                System.IAsyncResult _result = base.BeginInvoke("AddEvidence", _args, callback, asyncState);
                return _result;
            }
            
            public void EndAddEvidence(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("AddEvidence", _args, result);
            }
        }
    }
}
