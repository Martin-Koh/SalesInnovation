//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:4.0.30319.237
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.50826.0
// 
namespace SlvHanbaiClient.svcCopying {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EntityBase", Namespace="http://schemas.datacontract.org/2004/07/SlvHanbai.Web.Class.Entity")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(SlvHanbaiClient.svcCopying.EntityCopying))]
    public partial class EntityBase : object, System.ComponentModel.INotifyPropertyChanged {
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EntityCopying", Namespace="http://schemas.datacontract.org/2004/07/SlvHanbai.Web.Class.Entity")]
    public partial class EntityCopying : SlvHanbaiClient.svcCopying.EntityBase {
        
        private bool _is_exists_dataField;
        
        private bool _is_lock_successField;
        
        private string _messageField;
        
        private bool _retField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool _is_exists_data {
            get {
                return this._is_exists_dataField;
            }
            set {
                if ((this._is_exists_dataField.Equals(value) != true)) {
                    this._is_exists_dataField = value;
                    this.RaisePropertyChanged("_is_exists_data");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool _is_lock_success {
            get {
                return this._is_lock_successField;
            }
            set {
                if ((this._is_lock_successField.Equals(value) != true)) {
                    this._is_lock_successField = value;
                    this.RaisePropertyChanged("_is_lock_success");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string _message {
            get {
                return this._messageField;
            }
            set {
                if ((object.ReferenceEquals(this._messageField, value) != true)) {
                    this._messageField = value;
                    this.RaisePropertyChanged("_message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool _ret {
            get {
                return this._retField;
            }
            set {
                if ((this._retField.Equals(value) != true)) {
                    this._retField = value;
                    this.RaisePropertyChanged("_ret");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="svcCopying.svcCopying")]
    public interface svcCopying {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:svcCopying/CopyCheck", ReplyAction="urn:svcCopying/CopyCheckResponse")]
        System.IAsyncResult BeginCopyCheck(string random, string tblName, string Id, System.AsyncCallback callback, object asyncState);
        
        SlvHanbaiClient.svcCopying.EntityCopying EndCopyCheck(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface svcCopyingChannel : SlvHanbaiClient.svcCopying.svcCopying, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CopyCheckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CopyCheckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public SlvHanbaiClient.svcCopying.EntityCopying Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((SlvHanbaiClient.svcCopying.EntityCopying)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class svcCopyingClient : System.ServiceModel.ClientBase<SlvHanbaiClient.svcCopying.svcCopying>, SlvHanbaiClient.svcCopying.svcCopying {
        
        private BeginOperationDelegate onBeginCopyCheckDelegate;
        
        private EndOperationDelegate onEndCopyCheckDelegate;
        
        private System.Threading.SendOrPostCallback onCopyCheckCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public svcCopyingClient() {
        }
        
        public svcCopyingClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public svcCopyingClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public svcCopyingClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public svcCopyingClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("CookieContainer を設定できません。バインドに HttpCookieContainerBindingElement が含まれていることを確認してくだ" +
                            "さい。");
                }
            }
        }
        
        public event System.EventHandler<CopyCheckCompletedEventArgs> CopyCheckCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult SlvHanbaiClient.svcCopying.svcCopying.BeginCopyCheck(string random, string tblName, string Id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCopyCheck(random, tblName, Id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        SlvHanbaiClient.svcCopying.EntityCopying SlvHanbaiClient.svcCopying.svcCopying.EndCopyCheck(System.IAsyncResult result) {
            return base.Channel.EndCopyCheck(result);
        }
        
        private System.IAsyncResult OnBeginCopyCheck(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string random = ((string)(inValues[0]));
            string tblName = ((string)(inValues[1]));
            string Id = ((string)(inValues[2]));
            return ((SlvHanbaiClient.svcCopying.svcCopying)(this)).BeginCopyCheck(random, tblName, Id, callback, asyncState);
        }
        
        private object[] OnEndCopyCheck(System.IAsyncResult result) {
            SlvHanbaiClient.svcCopying.EntityCopying retVal = ((SlvHanbaiClient.svcCopying.svcCopying)(this)).EndCopyCheck(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCopyCheckCompleted(object state) {
            if ((this.CopyCheckCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CopyCheckCompleted(this, new CopyCheckCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CopyCheckAsync(string random, string tblName, string Id) {
            this.CopyCheckAsync(random, tblName, Id, null);
        }
        
        public void CopyCheckAsync(string random, string tblName, string Id, object userState) {
            if ((this.onBeginCopyCheckDelegate == null)) {
                this.onBeginCopyCheckDelegate = new BeginOperationDelegate(this.OnBeginCopyCheck);
            }
            if ((this.onEndCopyCheckDelegate == null)) {
                this.onEndCopyCheckDelegate = new EndOperationDelegate(this.OnEndCopyCheck);
            }
            if ((this.onCopyCheckCompletedDelegate == null)) {
                this.onCopyCheckCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCopyCheckCompleted);
            }
            base.InvokeAsync(this.onBeginCopyCheckDelegate, new object[] {
                        random,
                        tblName,
                        Id}, this.onEndCopyCheckDelegate, this.onCopyCheckCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override SlvHanbaiClient.svcCopying.svcCopying CreateChannel() {
            return new svcCopyingClientChannel(this);
        }
        
        private class svcCopyingClientChannel : ChannelBase<SlvHanbaiClient.svcCopying.svcCopying>, SlvHanbaiClient.svcCopying.svcCopying {
            
            public svcCopyingClientChannel(System.ServiceModel.ClientBase<SlvHanbaiClient.svcCopying.svcCopying> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginCopyCheck(string random, string tblName, string Id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = random;
                _args[1] = tblName;
                _args[2] = Id;
                System.IAsyncResult _result = base.BeginInvoke("CopyCheck", _args, callback, asyncState);
                return _result;
            }
            
            public SlvHanbaiClient.svcCopying.EntityCopying EndCopyCheck(System.IAsyncResult result) {
                object[] _args = new object[0];
                SlvHanbaiClient.svcCopying.EntityCopying _result = ((SlvHanbaiClient.svcCopying.EntityCopying)(base.EndInvoke("CopyCheck", _args, result)));
                return _result;
            }
        }
    }
}
